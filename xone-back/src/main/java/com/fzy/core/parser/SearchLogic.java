/* Generated By:JavaCC: Do not edit this line. SearchLogic.java */
package com.fzy.core.parser;
import java.io.Reader;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;

public class SearchLogic implements SearchLogicConstants {
        public SearchLogic(String searchLogicString){
                this((Reader)(new StringReader(searchLogicString)));
        }

  final public List exe() throws ParseException {
        List result;
    result = conditionItems();
    jj_consume_token(0);
          {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public List conditionItems() throws ParseException {
        List result=new ArrayList();
    label_1:
    while (true) {
                        ConditionItem item = new ConditionItem();
                        String logic;
                        String paramName;
                        String operator;
                        List items;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PARAM:
      case OR:
      case AND:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OR:
        case AND:
          logic = opLogic();
                                  item.setLogic(ParserUtils.removeChar(logic, '_'));
          break;
        default:
          jj_la1[0] = jj_gen;
          ;
        }
        paramName = paramName();
                                  item.setField(paramName);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQUALS:
        case GREAT_THAN:
        case LESS_THAN:
        case GREAT_THAN_OR_EQUAL_TO:
        case LESS_THAN_OR_EQUAL_TO:
        case NULL:
        case NOT_EQUAL:
        case NOT_NULL:
        case LIKE:
        case START_WITH:
        case END_WITH:
        case NOT_START_WITH:
        case NOT_END_WITH:
        case NOT_LIKE:
        case BLANK:
          operator = opCompare();
                                     item.setOperator(ParserUtils.removeChar(operator, '_'));
          break;
        default:
          jj_la1[1] = jj_gen;
          ;
        }
        break;
      case LEFT_PARENTHESIS:
        jj_consume_token(LEFT_PARENTHESIS);
        items = conditionItems();
        jj_consume_token(RIGHT_PARENTHESIS);
                                  item.setItems(items);
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                        result.add(item);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PARAM:
      case OR:
      case AND:
      case LEFT_PARENTHESIS:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_1;
      }
    }
                {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public String opLogic() throws ParseException {
        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OR:
      t = jj_consume_token(OR);
          {if (true) return t.image;}
      break;
    case AND:
      t = jj_consume_token(AND);
          {if (true) return t.image;}
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String opCompare() throws ParseException {
        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUALS:
      t = jj_consume_token(EQUALS);
          {if (true) return t.image;}
      break;
    case GREAT_THAN:
      t = jj_consume_token(GREAT_THAN);
          {if (true) return t.image;}
      break;
    case LESS_THAN:
      t = jj_consume_token(LESS_THAN);
          {if (true) return t.image;}
      break;
    case GREAT_THAN_OR_EQUAL_TO:
      t = jj_consume_token(GREAT_THAN_OR_EQUAL_TO);
          {if (true) return t.image;}
      break;
    case LESS_THAN_OR_EQUAL_TO:
      t = jj_consume_token(LESS_THAN_OR_EQUAL_TO);
          {if (true) return t.image;}
      break;
    case NULL:
      t = jj_consume_token(NULL);
          {if (true) return t.image;}
      break;
    case NOT_EQUAL:
      t = jj_consume_token(NOT_EQUAL);
          {if (true) return t.image;}
      break;
    case NOT_NULL:
      t = jj_consume_token(NOT_NULL);
          {if (true) return t.image;}
      break;
    case LIKE:
      t = jj_consume_token(LIKE);
          {if (true) return t.image;}
      break;
    case START_WITH:
      t = jj_consume_token(START_WITH);
          {if (true) return t.image;}
      break;
    case END_WITH:
      t = jj_consume_token(END_WITH);
          {if (true) return t.image;}
      break;
    case NOT_START_WITH:
      t = jj_consume_token(NOT_START_WITH);
          {if (true) return t.image;}
      break;
    case NOT_END_WITH:
      t = jj_consume_token(NOT_END_WITH);
          {if (true) return t.image;}
      break;
    case NOT_LIKE:
      t = jj_consume_token(NOT_LIKE);
          {if (true) return t.image;}
      break;
    case BLANK:
      t = jj_consume_token(BLANK);
          {if (true) return t.image;}
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String paramName() throws ParseException {
        Token t;
    t = jj_consume_token(PARAM);
          {if (true) return ParserUtils.removeChar(t.image, '-');}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public SearchLogicTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[6];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x6000000,0x1fffc0,0xe000020,0xe000020,0x6000000,0x1fffc0,};
   }

  /** Constructor with InputStream. */
  public SearchLogic(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SearchLogic(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SearchLogicTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public SearchLogic(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SearchLogicTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public SearchLogic(SearchLogicTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(SearchLogicTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[29];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 6; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 29; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
