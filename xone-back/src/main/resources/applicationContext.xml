<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:tool="http://www.springframework.org/schema/tool" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
     http://www.springframework.org/schema/beans/spring-beans.xsd  
     http://www.springframework.org/schema/tx  
     http://www.springframework.org/schema/tx/spring-tx.xsd  
     http://www.springframework.org/schema/aop  
     http://www.springframework.org/schema/aop/spring-aop.xsd  
     http://www.springframework.org/schema/jee  
     http://www.springframework.org/schema/jee/spring-jee.xsd  
     http://www.springframework.org/schema/context  
     http://www.springframework.org/schema/context/spring-context.xsd  
     http://www.springframework.org/schema/util  
     http://www.springframework.org/schema/util/spring-util.xsd  
     http://www.springframework.org/schema/tool  
     http://www.springframework.org/schema/tool/spring-tool.xsd"
	default-lazy-init="true" default-autowire="byName">
	<description>Spring公共配置文件</description>
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath*:database-mysql.properties</value>
	      		<value>classpath*:config.properties</value>
			</list>
		</property>
	</bean>
<!-- 	<context:property-placeholder location="classpath*:config.properties"/> -->
<!-- 	<bean id="myProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean"> -->
<!-- 	  <property name="locations"> -->
<!-- 	    <list> -->
<!-- 	      <value>classpath*:config.properties</value> -->
<!-- 	    </list> -->
<!-- 	  </property> -->
<!-- 	</bean> -->
<!-- 	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"> -->
<!--         <property name="properties"><ref bean="appConfig"></ref></property>         -->
<!--     </bean> -->
	
	<!-- 引用@Autowired必须定义这个bean --> 
	<bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"/>
	
<!-- 		使用annotation自动注册bean,并检查@Required,@Autowired的属性已被注入。注意它不但启用了对类包进行扫描以实施注释驱动 Bean -->
<!-- 		定义的功能，同时还启用了注释驱动自动注入的功能（即还隐式地在内部注册了AutowiredAnnotationBeanPostProcessor -->
<!-- 		和 CommonAnnotationBeanPostProcessor） -->
<!-- 		<context:component-scan />指定Bean扫描的包，多个包逗号隔开，任何标注了@Component，@Controller，@Service，@Repository的类，都会被自动识别为bean。 -->
	<context:component-scan base-package="com.xone.service" />
	<context:component-scan base-package="com.xone.model" />
	<context:component-scan base-package="com.xone.action" />
	
<!-- 	<aop:aspectj-autoproxy />声明aspectj动态代理，启用注解驱动的aspectj配置。 -->
<!-- 	<aop:aspectj-autoproxy  /> -->

<!-- <bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean" p:jndiName="java:comp/env/jdbc/MySSH" /> -->
	
	<tx:annotation-driven transaction-manager="transactionManager" />
	
	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager" >  
        <property name="sessionFactory" ref="sessionFactory" />  
    </bean>
 
<!--     <bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean" >       -->
<!--         <property name="configLocation" value="classpath:hibernate.cfg.xml" />   -->
<!--     </bean> -->
    
    <!-- 数据源定义 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="initialSize" value="${jdbc.initialSize}" />
		<property name="maxActive" value="${jdbc.maxActive}" />
		<property name="maxIdle" value="${jdbc.maxIdle}" />
		<property name="maxWait" value="${jdbc.maxWait}" />
		<property name="removeAbandoned" value="${jdbc.removeAbandoned}" />
		<property name="testOnBorrow" value="true" />
		<property name="defaultAutoCommit" value="true"/>
        <property name="removeAbandonedTimeout" value="60"/>
	</bean>

	<!--数据库连接池定义 -->
<!-- 	<bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean"  -->
<!-- 		destroy-method="close"> -->
<!-- 		<property name="jndiName" value="java:comp/env/${jndi.name}" />  -->
<!-- 		<property name="resourceRef" value="true" /> -->
<!-- 	</bean> -->
	<!-- dataSource start  dataSource end -->

	<!-- hibernate 定义 -->
<!-- 	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean"> -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean" > 
		<property name="dataSource" ref="dataSource" />
		<property name="mappingLocations">
			<list>
				<value>classpath*:com/xone/model/hibernate/entity/*.hbm.xml</value>
			</list>
		</property>
<!-- 		<property name="annotatedPackages"> -->
<!-- 			<list> -->
<!-- 			  <value>com.xone.model.entity.app</value> -->
<!-- 			</list> -->
<!-- 		</property> -->
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.current_session_context_class">thread</prop>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.query.substitutions">${hibernate.query.substitutions}</prop>
				<prop key="hibernate.jdbc.batch_size">${hibernate.jdbc.batch_size}</prop>
				<prop key="hibernate.jdbc.fetch_size">${hibernate.jdbc.fetch_size}</prop>
				<prop key="hibernate.use_outer_join">${hibernate.use_outer_join}</prop>
				<prop key="hibernate.max_fetch_depth">${hibernate.max_fetch_depth}</prop>
				<prop key="hibernate.generate_statistics">${hibernate.generate_statistics}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.connection.release_mode">on_close</prop>
				<prop key="hibernate.cache.use_minimal_puts">${hibernate.cache.use_minimal_puts}</prop>
				<prop key="hibernate.cache.use_query_cache">${hibernate.cache.use_query_cache}</prop>
				<prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use_second_level_cache}</prop>
				<prop key="hibernate.cache.provider_class">${hibernate.cache.provider_class}</prop>
				<prop key="hibernate.query.factory_class">${hibernate.query.factory_class}</prop>
			</props>
		</property>
	</bean>

    <bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate" >  
        <property name="sessionFactory" ref="sessionFactory" />  
    </bean>
    
    <bean id="transactionInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor" p:transactionManager-ref="transactionManager">  
        <property name="transactionAttributes">  
            <props>
                <prop key="get*">PROPAGATION_REQUIRED,readOnly</prop>  
                <prop key="find*">PROPAGATION_REQUIRED,readOnly</prop>  
                <prop key="select*">PROPAGATION_REQUIRED,readOnly</prop>  
                <prop key="query*">PROPAGATION_REQUIRED,readOnly</prop>               
                <prop key="sync*">PROPAGATION_REQUIRED</prop>  
                <prop key="finish*">PROPAGATION_REQUIRED</prop>  
                <prop key="add*">PROPAGATION_REQUIRED</prop>  
                <prop key="insert*">PROPAGATION_REQUIRED</prop>  
                <prop key="edit*">PROPAGATION_REQUIRED</prop>  
                <prop key="update*">PROPAGATION_REQUIRED</prop>  
                <prop key="save*">PROPAGATION_REQUIRED</prop>  
                <prop key="remove*">PROPAGATION_REQUIRED</prop>  
                <prop key="delete*">PROPAGATION_REQUIRED</prop>  
                <prop key="*">PROPAGATION_REQUIRED,-java.lang.Exception</prop>  
            </props>  
        </property>  
    </bean>
    
    <bean id="proxyCreator" class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator" p:beanNames="*Service,*ServiceImpl" p:interceptorNames="transactionInterceptor" />
    
    	<!-- sqlmap 定义 -->
<!-- 	<bean id="sqlMapClient" class="org.springframework.orm.ibatis.SqlMapClientFactoryBean"> -->
<!-- 		<property name="configLocation" value="WEB-INF/config/sql-map-config.xml" /> -->
<!-- 		<property name="dataSource" ref="dataSource" /> -->
<!-- 	</bean> -->

<!-- 	<bean id="sqlMapTemplate" class="org.springframework.orm.ibatis.SqlMapClientTemplate"> -->
<!-- 		<property name="sqlMapClient" ref="sqlMapClient" /> -->
<!-- 	</bean> -->
	
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
        <property name="dataSource" ref="dataSource" />  
        <property name="configLocation" value="WEB-INF/config/mybatis-sqlmap-config.xml" />  
    </bean>
	
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>

	<!-- 基类DAO定义 -->
	<bean id="abstractHibernateDao" class="com.xone.model.hibernate.generic.AbstractHibernateDao" abstract="true">
		<property name="sqlSession" ref="sqlSession"></property>
	</bean>
	
</beans>