<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
      http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  
      http://www.springframework.org/schema/security  
      http://www.springframework.org/schema/security/spring-security-3.1.xsd">
	<global-method-security pre-post-annotations="enabled">
<!-- 		AspectJ pointcut expression that locates our "post" method and applies  -->
<!-- 			security that way <protect-pointcut expression="execution(* bigbank.*Service.post*(..))"  -->
<!-- 			access="ROLE_TELLER"/> -->
	</global-method-security>
	<!--这是spring 提供的http/https信道安全的这个是重要的！你的请求信道是安全的！-->
	<http pattern="/js/**" security="none"></http>
	<http pattern="/css/**" security="none"></http>
	<http pattern="/images/**" security="none"></http>
	<http auto-config="true" use-expressions="true" access-denied-page="/user/denied">
	    <http-basic/>
        <intercept-url pattern="/**" access="permitAll" />
	    <intercept-url pattern="/admin/**" access="permitAll" />  
        <intercept-url pattern="/browser/**" access="permitAll" /> 
<!-- 		<intercept-url pattern="/welcome" access="hasRole('ROLE_USER')" /> -->
		<form-login />
<!--         <form-login login-page="/login.html" authentication-failure-url="/login.html?error=true" default-target-url="/welcome.html" /> -->
<!-- 		<form-login login-page="/login.html" default-target-url="/welcome.html" -->
<!-- 			authentication-failure-url="/loginfailed.html?error=true" /> -->
		<!-- <intercept-url pattern="/**" access="permitAll" /> -->
		<logout />
		<!-- 实现免登陆验证 -->
        <remember-me />
		<session-management session-fixation-protection="newSession" invalid-session-url="/timeout.jsp">
		    <concurrency-control max-sessions="2" error-if-maximum-exceeded="true" />
		</session-management>
<!-- 		FILTER_SECURITY_INTERCEPTOR是Spring Security默认的Filter，我们自定义的Filter必须在它之前，过滤客服请求。 -->
		<custom-filter ref="myFilter" before="FILTER_SECURITY_INTERCEPTOR"/>
	</http>
	<!-- 配置过滤器 -->  
    <beans:bean id="myFilter" class="com.xone.service.security.MySecurityFilter">
        <!-- 用户拥有的权限 -->  
        <beans:property name="authenticationManager" ref="myAuthenticationManager" />  
        <!-- 用户是否拥有所请求资源的权限 -->  
        <beans:property name="accessDecisionManager" ref="myAccessDecisionManager" />  
        <!-- 资源与权限对应关系 -->  
        <beans:property name="securityMetadataSource" ref="mySecurityMetadataSource" />
    </beans:bean>
    <!-- 实现了UserDetailsService的Bean -->  
    <authentication-manager alias="myAuthenticationManager">  
        <authentication-provider user-service-ref="myUserDetailServiceImpl" />  
    </authentication-manager>  
    <beans:bean id="myAccessDecisionManager" class="com.xone.service.security.MyAccessDecisionManager"></beans:bean>  
    <beans:bean id="mySecurityMetadataSource" class="com.xone.service.security.MySecurityMetadataSource">  
        <beans:constructor-arg name="resourcesService" ref="resourcesService"></beans:constructor-arg>  
    </beans:bean>  
    <beans:bean id="myUserDetailServiceImpl" class="com.xone.service.security.MyUserDetailServiceImpl">  
        <beans:property name="personService" ref="personService"></beans:property>
        <beans:property name="rolesService" ref="rolesService"></beans:property>
    </beans:bean>
<!-- 	<authentication-manager> -->
<!-- 		<authentication-provider> -->
<!-- 			<user-service> -->
<!-- 				<user name="admin" password="123456" authorities="ROLE_USER" /> -->
<!-- 			</user-service> -->
<!-- 		</authentication-provider> -->
<!-- 	</authentication-manager> -->
</beans:beans> 